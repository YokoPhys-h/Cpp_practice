めも

static_cast<double>(数字) //静的にdouble型にできる。これが一番良いかも
static int y //静的記憶期間(初期化が0で自動的にされる)
/*配列のデータの一部をvectorに代入*/
int ar[] = {1, 2, 3, 4, 5, 6, 7};
vector<int> v;
v.assign(&ar[0], &ar[3]);

v.push_back(123) //配列末尾に123を追加
v.erase(v.begin()+1) //配列2番目を消去
v.erase(v.begin()+1,v.begin()+3) //1,4を消去

v.size() //要素数を返す

v.front() //最初の要素を返す
v.back() //最後の要素を返す

vector<int> v{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
cout << count(v.begin(), v.end(), 5) << "\n";    //要素5の数を返す
特定の範囲の要素の数を求めたい場合は、「count(v.begin() + i, v.begin() + k, val)」の様にイテレータで範囲を指定する。

vector<int> v{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
auto itr = find(v.begin(), v.end(), 5);    //  最初の要素5へのイテレータを返す
if( itr != v.end() ) {     // 発見した場合
    発見した場合の処理
}

accumulate(v.begin(),v.end(),0) //動的配列の最初から最後まで要素を全加算する。最後の引数は初期値

sort(v.begin(),v.end()) //動的配列の要素を昇順にソート
一部をソートしたい場合は、「sort(v.begin() + i, v.begin() + k)」の様にイテレータで範囲を指定する。

vectorは末尾への挿入、消去はO(1)で高速だが、それ以外への挿入消去はO(N)でデータ数に比例した処理時間を要する。
このように任意位置への挿入、消去をしたい場合は同じ形でlistを用いると早い

remove(test1.begin(), test1.end(), 6); 6の数字を配列から消去

test1.back()//最後の要素を出力